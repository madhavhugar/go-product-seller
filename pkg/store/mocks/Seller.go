// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	model "coding-challenge-go/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// Seller is an autogenerated mock type for the Seller type
type Seller struct {
	mock.Mock
}

// FindByUUID provides a mock function with given fields: uuid
func (_m *Seller) FindByUUID(uuid string) (*model.Seller, error) {
	ret := _m.Called(uuid)

	var r0 *model.Seller
	if rf, ok := ret.Get(0).(func(string) *model.Seller); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *Seller) List() ([]*model.Seller, error) {
	ret := _m.Called()

	var r0 []*model.Seller
	if rf, ok := ret.Get(0).(func() []*model.Seller); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopSellersByProductCount provides a mock function with given fields:
func (_m *Seller) ListTopSellersByProductCount() ([]*model.Seller, error) {
	ret := _m.Called()

	var r0 []*model.Seller
	if rf, ok := ret.Get(0).(func() []*model.Seller); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
