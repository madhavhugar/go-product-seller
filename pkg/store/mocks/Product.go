// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	model "coding-challenge-go/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// Product is an autogenerated mock type for the Product type
type Product struct {
	mock.Mock
}

// Delete provides a mock function with given fields: product
func (_m *Product) Delete(product *model.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByUUID provides a mock function with given fields: uuid
func (_m *Product) FindByUUID(uuid string) (*model.Product, error) {
	ret := _m.Called(uuid)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(string) *model.Product); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: product
func (_m *Product) Insert(product *model.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: offset, limit
func (_m *Product) List(offset int, limit int) ([]*model.Product, error) {
	ret := _m.Called(offset, limit)

	var r0 []*model.Product
	if rf, ok := ret.Get(0).(func(int, int) []*model.Product); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: product
func (_m *Product) Update(product *model.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
